---
title: Analyse peak response Profile
format:
  html:
    embed-resources: true
---

```{r}
#| include: false
library(ggplot2)
library(tibble)
library(tidyr)
library(dplyr)
theme_cowplot_bg <- function() {
  theme_cowplot() +
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white")
  )
}
library(cowplot)
```

## Data prep

Here we load the data:

```{r}
library(DataTidy24TBVaccSexDiff)
data("data_tidy_vacc_freq")
```

Now we calculate the profile response, and then extract the peak profile response:

```{r}
data_tidy_vacc_profile <- data_tidy_vacc_freq |>
  vacc_calc_response_profile("response") |>
  vacc_calc_vaccine_induced_response("response") |>
  vacc_extract_peak() |>
  dplyr::filter(subset == "cd4") |>
  dplyr::filter(vaccine %in% c("h1", "m72"))
data_tidy_vacc_profile

data_tidy_vacc_summed <- data_tidy_vacc_freq |>
  vacc_calc_response_summed("response") |>
  vacc_calc_vaccine_induced_response("response") |>
  vacc_set_neg_to_zero("response") |>
  vacc_extract_peak() |>
  dplyr::filter(subset == "cd4")
data_tidy_vacc_summed
```

### Boxplot

Boxplot of Response by Sex and Infection Status 

```{r}
boxplot1 <- ggplot(data_tidy_vacc_profile, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_grid(vaccine + infxn ~ cyt_combn, scales = "free") +
  labs(title = "Response by Sex and Infection Status for each Cytokine Combination",
       x = "Sex",
       y = "Response") +
  theme_cowplot_bg() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))    

ggsave('Response by Sex and Infection Status for each CYtokine Combination.png',boxplot1)  


 #subset boxplot filtering 2 vaccines
selected_vaccines <- c('h1', 'm72')

# Filter the dataset
filtered_data <- data_tidy_vacc_profile %>%
  dplyr::filter(vaccine %in% selected_vaccines)

boxplot2 <- ggplot(filtered_data, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_grid(vaccine + infxn ~ cyt_combn, scales = "free") +
  labs(title = "Response by Sex and Infection Status for each Cytokine Combination",
       x = "Sex",
       y = "Response") +
  theme_cowplot_bg() +
  theme(axis.text.x = element_blank(),        # Remove x-axis text
    axis.ticks.x = element_blank(),
    legend.position = 'bottom')+   
  background_grid(major='y')+
  guides(fill = guide_legend(title = NULL))
#theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
ggsave('Response by Sex and Infection Status for each CYtokine Combination.png',boxplot2)  
 
```

#### PCA Biplot

##### Uninfected
For Uninfected Individuals(included only 'g+2+t+','g-2+t+' and 'g-2+t-' cytokine combinations 
as per Rodo(2019)):

```{r}
#create a wide format where each cytokine combination is a separate column
profile_wide <- data_tidy_vacc_profile |>
# Filter for uninfected individuals and specific cytokine combinations
  filter(infxn == "uninfected" & cyt_combn %in% c("g+2+t+", "g-2+t+", "g-2+t-")) %>%
  tidyr::pivot_wider(names_from = cyt_combn, values_from = response)

# Select only the cytokine combination columns for PCA
cytokine_cols <- colnames(profile_wide)[grepl("\\+", colnames(profile_wide))]
pca_result <- prcomp(profile_wide[, cytokine_cols], scale. = TRUE)  

# combine PCA results with the original metadata
pca_data <- as.data.frame(pca_result$x) |>
  dplyr::bind_cols(profile_wide |>
  dplyr::select(vaccine, sex, infxn))

# extract PCA loadings
loadings <- as.data.frame(pca_result$rotation[, 1:2]) # Take only the first two PCs
loadings$cyt_combn <- rownames(loadings) # Add cytokine combination names

# scaling factor for arrows
arrow_scale <- 8.5  

# scale PCA loadings for arrows
scaled_loadings <- loadings |>
  dplyr::mutate(PC1 = PC1 * arrow_scale,
         PC2 = PC2 * arrow_scale)

pca_var <- pca_result$sdev^2
pca_var_explained <- pca_var / sum(pca_var)
pc1_var <- scales::percent(pca_var_explained[1])
pc2_var <- scales::percent(pca_var_explained[2])
```

Plot the PCA Biplot for Uninfected Individuals:

```{r}
pca_plot1 <- ggplot(pca_data, aes(x = PC1, y = PC2, color = vaccine, shape = sex)) +
  geom_point(size = 3) +
  #facet_wrap(~ infxn) +
  labs(title = "PCA Biplot", x = "PC1", y = "PC2") + 
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.3, "cm")), color = "red", inherit.aes = FALSE) +
  geom_text(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), nudge_x = 1.5, nudge_y = 0.4, vjust = 1, hjust = 1, color = "red", inherit.aes = FALSE) +
  theme_cowplot_bg()  
ggsave('PCA_Biplot_uninf.png', pca_plot1, width = 12, height = 6)
```

PCA biplot with mean positions shown for each vaccine sex combo for uninfected Individuals:
```{r}
# calculate mean positions for each vaccine and sex combination
pca_data <- pca_data |>
  mutate(vaccine = toupper(vaccine),  # Capitalize the vaccine names
         sex = toupper(sex)           # Capitalize the sex values
  ) |>
  rename(Vaccine = vaccine, Sex = sex)

mean_positions <- pca_data %>%
  dplyr::group_by(Vaccine, Sex,infxn) %>%
  dplyr::summarize(PC1 = mean(PC1), PC2 = mean(PC2))

mean_positions <- mean_positions %>%
  dplyr::mutate(combo = paste(Vaccine, Sex, sep = "-"))

pca_plot2 <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Vaccine, shape = Sex)) +
  labs( 
       x = paste0("PC1 (", pc1_var, ")"), 
       y = paste0("PC2 (", pc2_var, ")")) +
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.3, "cm")), color = "black", inherit.aes = FALSE) +
  geom_text(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), 
            nudge_x = 1.5, nudge_y = 0.4, vjust = 1, hjust = 1, color = "black", 
            inherit.aes = FALSE) +
  geom_point(size = 3) +          
  geom_point(data = mean_positions, aes(x = PC1, y = PC2, color = Vaccine), 
             shape=1, fill=NA, size = 4, stroke=1.5) +
  ggrepel::geom_text_repel(data = mean_positions, aes(x = PC1, y = PC2, label = combo), 
            nudge_x = 1, nudge_y = 0.5, vjust = 1, hjust = 1, color = "black") +
  theme_cowplot_bg()+ 
  theme(axis.text.x = element_blank(),        # Remove x-axis text
    axis.ticks.x = element_blank())

ggsave('PCA Biplot_uninf_peak.png', pca_plot2,width =10, height=6)   
```

##### Infected

For Infected Individuals(included only 'g+2+t+' and 'g+2-t-' cytokine combinations as per Rodo(2019)):

```{r}
#create a wide format where each cytokine combination is a separate column
profile_wide <- data_tidy_vacc_profile |>
# Filter for uninfected individuals and specific cytokine combinations
  filter(infxn == "infected" & cyt_combn %in% c("g+2+t+", "g+2-t-")) %>%
  tidyr::pivot_wider(names_from = cyt_combn, values_from = response)

# Select only the cytokine combination columns for PCA
cytokine_cols <- colnames(profile_wide)[grepl("\\+", colnames(profile_wide))]
pca_result <- prcomp(profile_wide[, cytokine_cols], scale. = TRUE)  

# combine PCA results with the original metadata
pca_data <- as.data.frame(pca_result$x) |>
  dplyr::bind_cols(profile_wide |>
  dplyr::select(vaccine, sex, infxn))

# extract PCA loadings
loadings <- as.data.frame(pca_result$rotation[, 1:2]) # Take only the first two PCs
loadings$cyt_combn <- rownames(loadings) # Add cytokine combination names

# scaling factor for arrows
arrow_scale <- 8.5  

# scale PCA loadings for arrows
scaled_loadings <- loadings |>
  dplyr::mutate(PC1 = PC1 * arrow_scale,
         PC2 = PC2 * arrow_scale)

pca_var <- pca_result$sdev^2
pca_var_explained <- pca_var / sum(pca_var)
pc1_var <- scales::percent(pca_var_explained[1])
pc2_var <- scales::percent(pca_var_explained[2])
```

Plot the PCA Biplot for Infected Individuals:

```{r}
pca_plot1 <- ggplot(pca_data, aes(x = PC1, y = PC2, color = vaccine, shape = sex)) +
  geom_point(size = 3) +
  #facet_wrap(~ infxn) +
  labs(title = "PCA Biplot", x = "PC1", y = "PC2") + 
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.3, "cm")), color = "red", inherit.aes = FALSE) +
  geom_text(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), nudge_x = 1.5, nudge_y = 0.4, vjust = 1, hjust = 1, color = "red", inherit.aes = FALSE) +
  theme_cowplot_bg()  
ggsave('PCA_Biplot_inf.png', pca_plot1, width = 12, height = 6)
```

PCA biplot with mean positions shown for each vaccine sex combo for Infected Individuals:
```{r}
pca_data <- pca_data |>
  mutate(vaccine = toupper(vaccine),  # Capitalize the vaccine names
         sex = toupper(sex)           # Capitalize the sex values
  ) |>
  rename(Vaccine = vaccine, Sex = sex)
# calculate mean positions for each vaccine and sex combination
mean_positions <- pca_data %>%
  dplyr::group_by(Vaccine, Sex,infxn) %>%
  dplyr::summarize(PC1 = mean(PC1), PC2 = mean(PC2))

mean_positions <- mean_positions %>%
  dplyr::mutate(combo = paste(Vaccine, Sex, sep = "-"))

pca_plot2 <- ggplot(pca_data, aes(x = PC1, y = PC2, color = Vaccine, shape = Sex)) +
  labs(title = "PCA Biplot with Mean Positions", 
       x = paste0("PC1 (", pc1_var, ")"), 
       y = paste0("PC2 (", pc2_var, ")")) +
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.3, "cm")), color = "black", inherit.aes = FALSE) +
  geom_text(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), 
            nudge_x = 1.5, nudge_y = 0.4, vjust = 1, hjust = 1, color = "black", 
            inherit.aes = FALSE) +
  geom_point(size = 3) +          
  geom_point(data = mean_positions, aes(x = PC1, y = PC2, color = Vaccine), 
             shape=1, fill=NA, size = 4, stroke=1.5) +
  ggrepel::geom_text_repel(data = mean_positions, aes(x = PC1, y = PC2, label = combo), 
            nudge_x = 1, nudge_y = 0.5, vjust = 1, hjust = 1, color = "black") +
  theme_cowplot_bg()+ 
  theme(axis.text.x = element_blank(),        # Remove x-axis text
    axis.ticks.x = element_blank())

ggsave('PCA Biplot_inf_peak.png', pca_plot2,width =10, height=6)   
```

PCA biplot with ellipses:
```{r}
pca_plot3 <- ggplot(pca_data, aes(x = PC1, y = PC2, color = vaccine)) +
  geom_point(aes(shape = sex), size = 3) +
  facet_wrap(~ infxn) +
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.5, "cm")), color = "black", linewidth = 0.8, inherit.aes = FALSE) +
  stat_ellipse(aes(fill = vaccine, color = vaccine), geom = "polygon", alpha = 0.1, size = 3.0) +
  ggrepel::geom_text_repel(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), nudge_x = 1.5, nudge_y = 0.4, color = "black", inherit.aes = FALSE,segment.color = NA) +
  
  labs(title = "PCA Biplot of Response Profiles", x = "PC1", y = "PC2") + 
  theme_cowplot_bg() +
  theme(legend.position = "right")

ggsave('PCA_Biplot_ellipses.png', pca_plot3, width = 12, height = 6)
```

PCA Biplot with ellipses for each sex-vaccine combination
```{r}
# Create a new column combining sex and vaccine
pca_data <- pca_data %>%
  dplyr::mutate(sex_vaccine = paste(sex, vaccine, sep = "-"))

# define a custom color palette
custom_colors <- c("red", "green", "orange", "darkblue", "brown", "cyan", "purple", "pink")

pca_plot4 <- ggplot(pca_data, aes(x = PC1, y = PC2, color = sex_vaccine)) +
  geom_point(size = 3) +
  facet_wrap(~ infxn) +
  geom_segment(data = scaled_loadings, aes(x = 0, y = 0, xend = PC1, yend = PC2), 
               arrow = arrow(length = unit(0.5, "cm")), color = "black", linewidth = 0.8, inherit.aes = FALSE) +
  stat_ellipse(aes(fill = sex_vaccine, color = sex_vaccine), geom = "polygon", alpha = 0, linewidth = 2.5) +
  ggrepel::geom_text_repel(data = scaled_loadings, aes(x = PC1, y = PC2, label = cyt_combn), 
                           nudge_x = 1.5, nudge_y = 0.4, color = "black", inherit.aes = FALSE, segment.color = NA) +
  scale_color_manual(values = custom_colors) +  # Apply custom colors
  scale_fill_manual(values = custom_colors) +  # Apply custom colors for fill
  labs(title = "PCA Biplot of Response Profiles", x = "PC1", y = "PC2") + 
  theme_cowplot_bg() +
  theme(legend.position = "right")

ggsave('PCA_biplot_ellipses_vaccine_sex.png', pca_plot4, width = 12, height = 6)
```

## Analysis of Response Profile:

Identify individuals for which the sum of absolute changes from pre-vaccination(vaccine-induced summed response) was 0.02 or more:
```{r}
participant_ids <- data_tidy_vacc_summed %>%
  filter(response >= 0.02) %>%
  pull(ptid)
```

## Linear Models

```{r}
# Filter data to include only infected individuals
# Convert `sex` to a factor for modeling
inf_data <- data_tidy_vacc_profile %>%
  filter(ptid %in% participant_ids)|>
  filter(infxn == "infected") %>%
  mutate(sex = factor(sex, levels = c("male", "female")))

# Split data by vaccine
vaccine_inf <- inf_data %>%
  group_by(vaccine) %>%
  group_split()
```

Fit linear models to assess the effect of sex on the immune response profile for infected individuals:
```{r}
# Initialize list to store models
lm_inf <- list()

# Loop through each vaccine group, fit LM and store results
for (group in vaccine_inf) {
  vaccine <- unique(group$vaccine)
  model <- lm(response ~ sex, data = group)
  lm_inf[[vaccine]] <- model
}
summary(lm_inf[['h1']])
summary(lm_inf[['m72']])
```

Fit linear models to assess the effect of sex on the immune response profile for each cytokine combination for infected individuals:

```{r}
# Initialize list to store models for each vaccine and cytokine combination
lm_inf <- list()

# Loop through each vaccine group and fit LM for every cytokine combination
for (group in vaccine_inf) {
  vaccine <- unique(group$vaccine)
  
  # Split the group further by cytokine combination
  cyt_combn_groups <- group %>%
    group_by(cyt_combn) %>%
    group_split()
  
  # Initialize sublist for each vaccine
  lm_inf[[vaccine]] <- list()
  
  # Fit models for each cytokine combination
  for (cytokine_group in cyt_combn_groups) {
    cytokine <- unique(cytokine_group$cyt_combn)
    model <- lm(response ~ sex, data = cytokine_group)
    
    # Store the model in the list under the vaccine and cytokine combination
    lm_inf[[vaccine]][[cytokine]] <- model
  }
}

# Loop through all vaccines and their cytokine combinations to obtain results
for (vaccine in names(lm_inf)) {
  cat("Vaccine:", vaccine, "\n")
  
  for (cytokine in names(lm_inf[[vaccine]])) {
    cat("\nCytokine Combination:", cytokine, "\n")
    print(summary(lm_inf[[vaccine]][[cytokine]]))
    cat("\n--------------------------------------------\n")
  }
}
```

For uninfected individuals:

```{r}
# Filter data to include only uninfected individuals
# Convert `sex` to a factor for modeling
uninf_data <- data_tidy_vacc_profile %>%
  filter(ptid %in% participant_ids)|>
  filter(infxn == "uninfected") %>%
  mutate(sex = factor(sex, levels = c("male", "female")))

# Split data by vaccine
vaccine_uninf <- uninf_data %>%
  group_by(vaccine) %>%
  group_split()
```

Fit linear models for each vaccine to assess the effect of sex on the immune response profile for uninfected individuals:

```{r}
# Initialize list to store models
lm_uninf <- list()

# Loop through each vaccine group, fit LM and store results
for (group in vaccine_uninf) {
  vaccine <- unique(group$vaccine)
  model <- lm(response ~ sex, data = group)
  lm_uninf[[vaccine]] <- model
}
summary(lm_uninf[['h1']])
summary(lm_uninf[['m72']])
```

Fit linear models to assess the effect of sex on the immune response profile for each cytokine combination for uninfected individuals:

```{r}
# Initialize list to store models for each vaccine and cytokine combination
lm_uninf <- list()

# Loop through each vaccine group and fit LM for every cytokine combination
for (group in vaccine_uninf) {
  vaccine <- unique(group$vaccine)
  
  # Split the group further by cytokine combination
  cyt_combn_groups <- group %>%
    group_by(cyt_combn) %>%
    group_split()
  
  # Initialize sublist for each vaccine
  lm_uninf[[vaccine]] <- list()
  
  # Fit models for each cytokine combination
  for (cytokine_group in cyt_combn_groups) {
    cytokine <- unique(cytokine_group$cyt_combn)
    model <- lm(response ~ sex, data = cytokine_group)
    
    # Store the model in the list under the vaccine and cytokine combination
    lm_uninf[[vaccine]][[cytokine]] <- model
  }
}

# Loop through all vaccines and their cytokine combinations to obtain results
for (vaccine in names(lm_uninf)) {
  cat("Vaccine:", vaccine, "\n")
  
  for (cytokine in names(lm_uninf[[vaccine]])) {
    cat("\nCytokine Combination:", cytokine, "\n")
    print(summary(lm_uninf[[vaccine]][[cytokine]]))
    cat("\n--------------------------------------------\n")
  }
}
```

## Beta Regression Models
Transform response to lie between 0 and 1 using proportions:
```{r}
data_tidy_vacc_profile <- data_tidy_vacc_profile |>
  dplyr::mutate(response = pmax(0, response)) |> 
  dplyr::mutate(response_proportion = sqrt(response / 100) + 1e-6)
```

Fit beta regression model for infected individuals with interaction term
```{r}
library(betareg)
library(statmod)
library(numDeriv)

full_model_inf1 <- betareg(response_proportion ~ sex * vaccine * cyt_combn, data = data_tidy_vacc_profile|>
                  dplyr::filter(ptid %in% participant_ids)|>
                  dplyr::filter(infxn =="infected"))

summary(full_model_inf1)

library(purrr)

# Split the dataset by cytokine combination
cytokine_splits <- data_tidy_vacc_profile %>%
  filter(ptid %in% participant_ids)|>
  filter(infxn == "infected") %>%
  split(.$cyt_combn)

# Fit beta regression model for each cytokine combination
beta_models_inf1 <- map(cytokine_splits, function(data) {
  betareg(response_proportion ~ sex * vaccine, data = data)
})
beta_models_inf1
```

Fit beta regression model for uninfected individuals with interaction term
```{r}
full_model_uninf1 <- betareg(response_proportion ~ sex * vaccine * cyt_combn, data = data_tidy_vacc_profile|>
                  dplyr::filter(ptid %in% participant_ids)|>
                  dplyr::filter(infxn =="uninfected"))

summary(full_model_uninf1)

# Split the dataset by cytokine combination
cytokine_splits <- data_tidy_vacc_profile %>%
  filter(ptid %in% participant_ids)|>
  filter(infxn == "uninfected") %>%
  split(.$cyt_combn)

# Fit beta regression model for each cytokine combination
beta_models_uninf1 <- map(cytokine_splits, function(data) {
  betareg(response_proportion ~ sex * vaccine, data = data)
})
beta_models_uninf1
```

### Global Test

For infected:

```{r}
results_list <- list()

# Get unique cytokine combinations from the data
cyt_combinations <- unique(data_tidy_vacc_profile$cyt_combn)

# Loop over each cytokine combination
for (cyt in cyt_combinations) {
  
  # Filter data for the current cytokine combination and infected individuals
  data_cyt <- data_tidy_vacc_profile |> 
    dplyr::filter(ptid %in% participant_ids)|>
    dplyr::filter(cyt_combn == cyt, infxn == "infected")
  
  # Full model with sex and vaccine interaction
  full_model_inf <- lm(
    response ~ sex * vaccine,
    data = data_cyt
  )
  
  # Null model without sex effect
  null_model_inf <- lm(
    response ~ vaccine,
    data = data_cyt
  )
  
  # Perform Wald test
  Wald_test <- car::linearHypothesis(
    full_model_inf,
    c("sexmale = 0",
     "vaccinem72",  
      "sexmale:vaccinem72 = 0")
  )
  
  # Perform likelihood ratio test
  likelihood_test <- lmtest::lrtest(full_model_inf, null_model_inf)
  
  # Extract p-values for both tests
  p_values <- c(Wald_test$`Pr(>Chisq)`[2], likelihood_test$`Pr(>Chisq)`[2])
  
  # Store the results in a tibble
  result_tbl <- tibble(
    Cytokine_Combination = cyt,
    Test = c("Wald", "Likelihood Ratio"),
    `P-value` = p_values,
    `Q-value` = p.adjust(p_values, method = "holm")
  )
  
  # Append the result for the current cytokine combination to the results list
  results_list[[cyt]] <- result_tbl
}

# Combine the results for all cytokine combinations into a single tibble
final_results_inf <- bind_rows(results_list)
final_results_inf
```