---
title: Analyse peak response
format:
  html:
    embed-resources: true
---

```{r}
#| include: false
library(ggplot2)
library(tibble)
```


## Data prep

Here we load the data:

```{r}
library(DataTidy24TBVaccSexDiff)
data("data_tidy_vacc_freq")
```

Now we calculate the summed response and the profile response, and then extract the peak response:

```{r}
data_tidy_vacc_summed <- data_tidy_vacc_freq |>
  vacc_calc_response_summed("response") |>
  vacc_calc_vaccine_induced_response("response") |>
  vacc_set_neg_to_zero("response") |>
  vacc_extract_peak()
data_tidy_vacc_summed
data_tidy_vacc_profile <- data_tidy_vacc_freq |>
  vacc_calc_response_profile("response") |>
  vacc_calc_vaccine_induced_response("response") |>
  vacc_extract_peak()
data_tidy_vacc_profile
```

## Analysis

```{r}
#install.packages("cowplot")
library(cowplot)
```

Boxplot of summed response by infection status:

```{r}
boxplot1 <- ggplot(data_tidy_vacc_summed, aes(x = infxn, y = response, fill = infxn)) +
  geom_boxplot() +
  facet_wrap(~ vaccine)+
  labs(title = "Summed Response by Infection Status", x = "Infection Status", y = "Summed Response") +
  theme_cowplot()
ggsave("Boxplot of Summed Response by Infection Status.png", boxplot1)
```

Boxplot of summed response by sex:

```{r}
boxplot2 <- ggplot(data_tidy_vacc_summed, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_wrap(~ vaccine)+
  labs(title = "Summed Response by Sex", x = "Sex", y = "Summed Response") +
  theme_cowplot()
ggsave("Boxplot of Summed Response by Sex.png", boxplot2)
```

Boxplot of summed response by sex and infection status:

```{r}
boxplot3 <- ggplot(data_tidy_vacc_summed, aes(x = sex, y = response, fill = sex)) +
  geom_boxplot() +
  facet_grid(vaccine ~ infxn) +
  labs(title = "Summed Response by Sex, Vaccine, and Infection Status", x = "Sex", y = "Summed Response") +
  theme_cowplot()

# Save the plot
ggsave("Boxplot_of_Summed_Response_by_Sex_Vaccine_and_Infection_Status.png", boxplot3)
```

Perform Mann-Whitney Tests :

```{r}
Mann_Whitney_tests <- list(
  infxn = wilcox.test(response ~ infxn, data = data_tidy_vacc_summed),
  sex = wilcox.test(response ~ sex, data = data_tidy_vacc_summed)
)
p_values <- sapply(Mann_Whitney_tests, function(test) test$p.value)
p_values
p_adjusted <- p.adjust(p_values, method = "bonferroni")
p_adjusted
```
Kruskal-Wallis Test:

```{r}
vacc_inf_sex <- with(data_tidy_vacc_summed, interaction(vaccine, infxn, sex))
test <- kruskal.test(response ~ vacc_inf_sex, data = data_tidy_vacc_summed)
test
```

Skewness of Responses:

```{r}
#install.packages('moments')
library(moments)
skewness(data_tidy_vacc_summed$response)

png(file="histogram.png")
hist(data_tidy_vacc_summed$response, col='blue')
dev.off()
```

Load betareg package:

```{r}
#install.packages('betareg')
#install.packages('statmod')
#install.packages("numDeriv")
library(betareg)
```

Transform response to lie between 0 and 1:

```{r}
data_tidy_vacc_summed$response <- data_tidy_vacc_summed$response / max(data_tidy_vacc_summed$response)
```

Fit a Beta Regression Model:

```{r}
betaregunin_model <- betareg(response ~ sex*vaccine, data = data_tidy_vacc_summed|> dplyr::filter(infxn == "uninfected"))
summary(betaregunin_model)

png(file="beta residuals.png")
plot(residuals(betaregunin_model), type = "p",col='red')
dev.off()

betaregin_model <- betareg(response ~ sex*vaccine, data = data_tidy_vacc_summed|> dplyr::filter(infxn == "infected"))
summary(betaregin_model)
```

```{r}
data_tidy_vacc_summed_inf <- data_tidy_vacc_summed |>  dplyr::filter(infxn == "infected") 
betaregin_model_h1 <- betareg(  response ~ sex,  data = data_tidy_vacc_summed_inf |>    dplyr::filter(vaccine == "h1")) 
betaregin_model_h56 <- betareg(  response ~ sex,  data = data_tidy_vacc_summed_inf |>    dplyr::filter(vaccine == "h56")) 
betaregin_model_mva85a <- betareg(  response ~ sex,  data = data_tidy_vacc_summed_inf |>    dplyr::filter(vaccine == "mva85a"))

p_vec <- c(
  summary(betaregin_model_h1)$coefficients$mean[2, 4],
  summary(betaregin_model_h56)$coefficients$mean[2, 4],
  summary(betaregin_model_mva85a)$coefficients$mean[2, 4]
)
p_vec

p.adjust(p_vec, method = "holm")
```

Load gamlss package:

```{r}
#install.packages('gamlss')
library(gamlss)
```

Fit Gamlss model:

```{r}
data_tidy_vacc_summed$response <- pmin(pmax(data_tidy_vacc_summed$response, .Machine$double.eps), 1 - .Machine$double.eps)

gamlss_model1 <- gamlss(response ~ vaccine + infxn + sex + subset, data = data_tidy_vacc_summed)
summary(gamlss_model1)

png(file="gamlss residuals 1.png")
plot(residuals(gamlss_model1), type = "p",col='red')
dev.off()

gamlss_model2 <- gamlss(response ~ vaccine + infxn + sex + subset, 
                sigma.formula = ~ vaccine + infxn + sex + subset, 
                family = BE(), data = data_tidy_vacc_summed)
summary(gamlss_model2)

png(file="gamlss residuals 2.png")
plot(residuals(gamlss_model2), type = "p",col='red')
dev.off()
```

